node js - JS run time env, used for server side programming
not a lang/ library/ framework

javascript language sirf browser ke andr hi execute ho sakti hai
chrome-v8 engine
ryan dahl- developer of node.js
chrome's v8 engine + c++ code => node.js
benefit of embedding c++ with chrome v8 engine is that-
 you can run js outside of the browser, javascript can talk to native machine
 because of c++,
 you can create webservers in js language

v8 engine directly embedd nhin kiya gya hai jitne bhi
dom ke elements hain unko nikaal diya gya hai
or anything related to window, or anything related to UI


node js is an open-source and cross platform javascript
run time env.
node.js runs the v8 javscript engine, the core ofgoogle chrome, outside of the browser.
 node js runs in a single process, without creating a new thread for 
 every req.

 node.js uses event driven , non blocking I/object
 model to handle concurrent request with single thread.

 why is node.js popular?
  javascript everywhere(client +server)
  fast performance
  lightweight- build in event driven architecture
  faster time to market
  modern architecture and scalibility
  cross platform- creating APIs
  vast number of libraries and packages
  can be hosted anywhere



node repl(read evaluate print loop) -
.help gives us command

process- provides info about and cntrl over the current node.js process
process.argv- returns an array containing the commaand line args passed 
    when the node.js process was launched

module.exports- requiring files
require()- a build -in-function to include external modules that exist in separate files
module.exports a special object

repl- debug js codes
read- reads user inputs , parses the input into js data structure, and stores it in the memory
eval- takes and evaluates the data structure
print- prints the result
loop- looops the above command until the user presses ctrl-c twice

repl
1. js expression(combination of operator and operands)
2. use variables
3. multiline codes
4. use (_) to get the last result
5. we can use editor method

consider modules to be the same as javascript librraies.
a set of functions you want to include in your application
node.js has a set of built-in modules which you can see without any
further installation.

node.js includes an additional data type called buffer.
(not available in browsers javascript)
buffer is mainly used to store binary data, while reading from a file or recieving packets over the network.
 
build apps with node.js
  streaming web applications like Netflix, amazon
  real time web applicaions like chat, IM
  microservices and IOT applications
  build any mern stack application like ecoomerce, payments
  social media and networking applicatins like linkedin, medium
  create restful APIs

Node.js VS browser
   both browser and node.js use javascript as their
   programming language
   
   building apps that run in the browser is a completely different thing than building a node.js application
 
   while browser we have access to DOM, Web API where as with Node.js we havemodules provide to
   access to file system, OS.

   Node.js supports both the CommonJs require() and ESModules systems
   import() while in the browser we are starting to see the ES5
   Modules standard being implemented.

   js concepts to know: 
   classes, objects, functions , scopes and loops, variables, expressions, types
   async await, closures, async programming and callbacks 
   and event loop

whenever you make a change it should automatically detect and exceute the module for
that we have nodemon
 install 
  to install it globally-
    npm i -g nodemon
 or install it as an dev dependancy
   npm i --save-dev nodemon

exit from the script 
 process.exit(0);

read env variables in node.js

node -r dotenv/config env.js

REPL-read evaluate print and loop
 if you want to use node CLI.
 in terminal write node 
   
Number. tab button - give all the property you can use open
                    number - write in node CLI
                
if you want to write that programatically then,
  
const repl = require("repl");

const local = repl.start("node console starts");

and then in terminal write node repl.js
 the node CLI will appear.

 local.on('exit', () => {
    console.log("exiting REPL");
    process.exit();
});   - to exit with some message

process is a very powerful module in the js

whenever you run a node file and you want to pass
an arguments- 
 make an arguments.js file

npm- node package manager

npm init - make a template for us or rather a file 
   that helps us run the project
so whenever we make a new project we have to npm init.
 after we run npm init - well see there is a package.json file made
   it is like a config file 

modules - 
require function
 
 fs- file system
 in node js fs module is inbuilt
blocking and non blocking req

file handling is not possible in normal javascript
bcoz of security purposes but node.js gives you fs modules with which you can interact with file modules

what is node.js architecture?
  the flow of node.js starts from a client
client(runs on node js server) ->client makes a request to
  a server -> 

  event queue- jitni bhi requests aati hain voh sab iss event queue main queue hoti hain 
          line main lagti jayegii
  and after that the req goes into an event loop 

event loop- ek aisi machine jo humare event queue ke upar humesha watch kar rha hai
    yeh chalta rehta hai dekhta rehta hai ki koi request toh nhin aayi
  aur agr queue ke andr koi bhi req aati hai toh yeh usko uthata hai fifo principle par
  the req that came first will be picked first
so the work of event loop is to watch event queue and remove req from that one by one

now when we pick up any req that can be of two types 
blocking operations(synchronous) and non blocking operations
(asynchronous)
so when event loop picks up a request from event queue
it checks if it is blocking or non blocking

if it non blocking voh usko process karegi aur user ko response dedegi
and if it is blocking operation then,

blocking operation---------------------------> thread pool
              (i need a thread/worker)
            (assign a worker and make him work)
 
                       returns the result<----------

if it is blocking operation then , to resolve the req this blocking operation goes to the
thread pool  

thread pool- pool of threads jismain bhut saaare threads hain 
   aur these threads are responsible for fulfilling your blocking operations
  understand this thread as worker jo tumhare liye kaam krte hain

every thread is assigned to a blocking operation ki voh iss kam ko krega
 
so , blocking operations thread poool ko keh rha hai : i need a thread or a worker
aur thread pool check kr rha ki threads/worker available hai bcoz humare pass yeh threads limited hote hain
toh agr uske pass yeh worker hoga toh yeh usko assign kr dega 
so when the work will be completed then the worker will again come and sit in the thread pool
and will return the result

this was the complete node js architecture

client-> sends request-> request goes into event queue->event loop picks 
up the request -> checks if it blocking or non blocking ->
if non blocking operation then it get completed on the stop -> and then send back the response to the client->
 and if it is blocking operation then it goes to thread pool and then vahan pe threads hote hain worker hote hain
 voh threads humare kaam ko fulfill karte hain and return the
 result 

now the problem,
the threads you have are limited ,by default voh 4 threads use krte hain
suppose the code you have written is blocking code 
now the user1 has come with blocking request and has taken 1 worker and that is getting processed
user2 comes and voh bhi process ho rha hai 
same with user3 , user4 
now all the workers have become busy , so
when user5 will come he will have to wait for the workers to get free,
pehle 4 workers pehle 4 users ne block kr liye 
now if the worker of user1 gets free , then the execution of user5 starts
so it will cause scalability issue-> the waiting time will increase
that is why it is not recommended to write blocking code
and always suggested to write non blocking code 




how does node.js works internally?

