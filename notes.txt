node js - JS run time env, used for server side programming
not a lang/ library/ framework

javascript language sirf browser ke andr hi execute ho sakti hai
chrome-v8 engine
ryan dahl- developer of node.js
chrome's v8 engine + c++ code => node.js
benefit of embedding c++ with chrome v8 engine is that-
 you can run js outside of the browser, javascript can talk to native machine
 because of c++,
 you can create webservers in js language

v8 engine directly embedd nhin kiya gya hai jitne bhi
dom ke elements hain unko nikaal diya gya hai
or anything related to window, or anything related to UI


node js is an open-source and cross platform javascript
run time env.
node.js runs the v8 javscript engine, the core ofgoogle chrome, outside of the browser.
 node js runs in a single process, without creating a new thread for 
 every req.

 node.js uses event driven , non blocking I/object
 model to handle concurrent request with single thread.

 why is node.js popular?
  javascript everywhere(client +server)
  fast performance
  lightweight- build in event driven architecture
  faster time to market
  modern architecture and scalibility
  cross platform- creating APIs
  vast number of libraries and packages
  can be hosted anywhere



node repl(read evaluate print loop) -
.help gives us command

process- provides info about and cntrl over the current node.js process
process.argv- returns an array containing the commaand line args passed 
    when the node.js process was launched

module.exports- requiring files
require()- a build -in-function to include external modules that exist in separate files
module.exports a special object

repl- debug js codes
read- reads user inputs , parses the input into js data structure, and stores it in the memory
eval- takes and evaluates the data structure
print- prints the result
loop- looops the above command until the user presses ctrl-c twice

repl
1. js expression(combination of operator and operands)
2. use variables
3. multiline codes
4. use (_) to get the last result
5. we can use editor method

consider modules to be the same as javascript librraies.
a set of functions you want to include in your application
node.js has a set of built-in modules which you can see without any
further installation.

node.js includes an additional data type called buffer.
(not available in browsers javascript)
buffer is mainly used to store binary data, while reading from a file or recieving packets over the network.
 
build apps with node.js
  streaming web applications like Netflix, amazon
  real time web applicaions like chat, IM
  microservices and IOT applications
  build any mern stack application like ecoomerce, payments
  social media and networking applicatins like linkedin, medium
  create restful APIs

Node.js VS browser
   both browser and node.js use javascript as their
   programming language
   
   building apps that run in the browser is a completely different thing than building a node.js application
 
   while browser we have access to DOM, Web API where as with Node.js we havemodules provide to
   access to file system, OS.

   Node.js supports both the CommonJs require() and ESModules systems
   import() while in the browser we are starting to see the ES5
   Modules standard being implemented.

   js concepts to know: 
   classes, objects, functions , scopes and loops, variables, expressions, types
   async await, closures, async programming and callbacks 
   and event loop

whenever you make a change it should automatically detect and exceute the module for
that we have nodemon
 install 
  to install it globally-
    npm i -g nodemon
 or install it as an dev dependancy
   npm i --save-dev nodemon

exit from the script 
 process.exit(0);

read env variables in node.js

node -r dotenv/config env.js

REPL-read evaluate print and loop
 if you want to use node CLI.
 in terminal write node 
   
Number. tab button - give all the property you can use open
                    number - write in node CLI
                
if you want to write that programatically then,
  
const repl = require("repl");

const local = repl.start("node console starts");

and then in terminal write node repl.js
 the node CLI will appear.

 local.on('exit', () => {
    console.log("exiting REPL");
    process.exit();
});   - to exit with some message

process is a very powerful module in the js

whenever you run a node file and you want to pass
an arguments- 
 make an arguments.js file

npm- node package manager

npm init - make a template for us or rather a file 
   that helps us run the project
so whenever we make a new project we have to npm init.
 after we run npm init - well see there is a package.json file made
   it is like a config file 

modules - 
require function
